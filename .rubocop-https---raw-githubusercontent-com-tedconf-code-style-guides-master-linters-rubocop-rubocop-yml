# Check README.md for usage & style conventions.

# don't check style on generated files.
AllCops:
  Exclude:
    - 'tmp/**/*'
    - 'db/schema.rb'
    - 'bin/*'


# codifying current rubocop defaults
# establish our own baseline in case the project's defaults are changed
#
# flagging this as 'refactor'-level because they're so arbitrary
# tempted to do the same for cyclomatic complexity, perceived complexity, etc.
# will hold off on that for now, but PRs/discussion are welcome.
Metrics/AbcSize:
  Max: 25
  Severity: refactor



# writing long var names as a way of self-documenting shouldn't be discouraged
# also allowing URLs & etc so as not to require artifically breaking apart
# non-code strings. (this is current default already, but let's be explicit.)
#
# "It's like writing on a roll of toilet paper." - George Riley
Metrics/LineLength:
  Max: 100
  AllowHeredoc: true
  AllowURI: true
  URISchemes:
    - http
    - https



Metrics/MethodLength:
  Max: 10
  Severity: refactor



# Style/AlignParameters
# "Align the parameters of a method call if they span more than one line."
#
# 'with_fixed_indentation' means subsequent lines of method arguments should
# have 1 level of indentation from the method invocation.
#
# allowed examples:
#
#   server 'beapp-e01.private.ted.com',
#     user: 'tedconf',
#     roles: %w(web app)
#
#   set :ssh_options,
#     port: 55423, # rubocop:disable Style/NumericLiterals
#     forward_agent: true,
#     proxy: Net::SSH::Proxy::Command.new('ssh gateway-e01.ted.com -p 55423 -W %h:%p')
#
Style/AlignParameters:
  EnforcedStyle: with_fixed_indentation



# expect {
#   a_thing
# }.to raise_error
#
# is fine.
Style/BlockDelimiters:
  EnforcedStyle: braces_for_chaining



# Style/ClosingParenthesisIndentation
# "Align ) with ("
#
# example:
#
#   create(:talkstar_media,
#     identifier: 'aaa',
#     talkstar_media_provider_id: non_acme_provider_id
#   )
#
# aligning ')' with '(' in cases like this end up creating unnecessarily long
# lines, without improving readability all that much (if at all) IMO.
Style/ClosingParenthesisIndentation:
  Enabled: false



# it's ok to do this when it makes the code feel less crowded.
#
# example:
#
#   class TalksController < ApplicationController
#
#     def show
#       expires_in 10.seconds, public: true
#       super
#     end
#
#   end
#
# according to these cops, those empty lines after `class` and before the final
# `end` shouldn't be there. they aren't always necessary, of course, but in
# many cases they improve a person's ability to skim the code quickly.
Style/EmptyLinesAroundBlockBody:
  Enabled: false
Style/EmptyLinesAroundClassBody:
  Enabled: false
Style/EmptyLinesAroundMethodBody:
  Enabled: false
Style/EmptyLinesAroundModuleBody:
  Enabled: false



# "Style/Lambda: Use the lambda method for multi-line lambdas."
#
# multi-line lambdas using curly-brace syntax come up in a few places:
#   - named scopes in models
#   - config/deploy.rb, which relies heavily on lambdas
#
# example:
#
#   scope :whatever, -> {
#     where(foo: 1)
#   }
#
# this is perfectly readable, but is flagged by this cop.
Style/Lambda:
  Enabled: false



# `unless` has always been a cognitive stumbling block for me (alex) & I
# strongly prefer `! if`.
#
# maybe controversial? forgiveness > permission. I can see backing off on this
# one depending on what the rest of y'all think.
Style/NegatedIf:
  Enabled: false
